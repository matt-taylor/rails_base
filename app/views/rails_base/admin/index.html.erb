
<% filters = RailsBase.config.admin.admin_page_filter.map { |f| [f[:filter], f[:id]] } %>
<div class='row text-center justify-content-center'>
  <div class='col-md-4 col-md-offset-4'>
    <%= select_tag 'admin_filter_user_by', options_for_select(filters), include_blank: 'Filter Users', class: 'form-control', onchange: 'filter_admins()' %>
  </div>
</div>
<div class='table-responsive-xl' >
  <table class="tableFixHead table table-striped table-bordered">
    <thead class="thead-dark text-center">
      <% RailsBase.config.admin.admin_page_tiles.each do |tile| %>
        <th <%= "style='min-width:300px'" if tile.min_width %>> <%= tile.col_name %> </th>
      <% end %>
    </thead>
    <tbody class='text-center'>
    <% admin_user = current_user %>
    <% User.all.each do |user| %>
      <% id_base = "#{user.id}_#{(100*rand).to_i}" %>
      <tr class='admin_filter_tr <%= filtered_classes(user, admin_user) %>'>
        <% RailsBase.config.admin.admin_page_tiles.each do |tile| %>
          <td id='<%= id_base %>_<%= tile.name %>' >
            <% case tile.type %>
            <% when :risky %>
              <%= render partial: 'rails_base/shared/admin_risky_change', locals: { type:  tile.name, current_value: tile.value.call(user), user: user, parent: id_base , modal_mapping: tile.name, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :toggle %>
              <%= render partial: 'rails_base/shared/admin_toggle_button', locals: { type: tile.name, checked: tile.value.call(user), user: user, data_on: tile.on, data_off: tile.off, parent: id_base, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :selector %>
              <%= render partial: 'rails_base/shared/admin_selector_dropdown', locals: { type: tile.name, options: tile.selector.call(user), selector: tile.value.call(user), user: user, parent: id_base, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :text %>
              <%= render partial: 'rails_base/shared/admin_modify_text', locals: { type: tile.name , current_value: tile.value.call(user), user: user, parent: id_base, modal_partial: tile.partial, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :button %>
              <% if tile.disabled&.call(user, admin_user) %>
              <div>
                <span style="width: 88%; float: left;">
                  <%= button_to tile.col_name,  tile.url.call(user), method: tile.method, class: "btn btn-block btn-#{tile.color}  stay-disabled", disabled: true %>
                </span>
                <span style="width: 8%; float: right;">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 16 16" data-toggle='tooltip' title='<%= tile.disabled_msg&.call(user, admin_user) %> '>
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                  </svg>
                </span>
              </div>
              <% else %>
                <%= button_to tile.col_name,  tile.url.call(user), method: tile.method, class: "btn btn-block btn-#{tile.color}"%>
              <% end %>
            <% when :plain %>
              <%= tile.value.call(user) %>
            <% end %>
          </td>
        <% end %>
      </tr>
    <% end %>
    </tbody>
  </table>
</div>

<div class='modal fade' id='sharedAdminModal' tabindex='-1' role='dialog' aria-labelledby='sharedAdminModalLabel' aria-hidden='true'></div>

<script type="text/javascript">
  var shared_admin_modal = 'sharedAdminModal'

  function filter_admins(){
    var class_id = $('#admin_filter_user_by').val()
    if(class_id == ''){
      $('.admin_filter_tr').show()
    } else {
      $('.admin_filter_tr').hide()
      $(`.${class_id}`).show()
    }
    console.log(`id: ${class_id}`)
  }

  function show_shared_admin_modal(){
    $(`#${shared_admin_modal}`).appendTo('body').modal('show');
  }

  function hide_shared_admin_modal(){
    $(`#${shared_admin_modal}`).modal('hide');
    clear_shared_admin_modal();
  }

  function set_shared_admin_modal_content(html){
    $(`#${shared_admin_modal}`).html(html)
    show_shared_admin_modal();
  }

  function clear_shared_admin_modal(){
    set_shared_admin_modal_content('');
  }

  function admin_risky_mfa_send(modal_id){
    _rails_base_hide_displays()
    $.ajax({
      type: "POST",
      url: "<%= RailsBase.url_routes.admin_validate_intent_path%>",
      headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
      success: function(data) {
        $(`#${modal_id}`).modal('show');
        admin_risky_icon_proceed()
      },
      error: function(xhr, status, error) {
        _rails_base_display_alert(xhr.responseJSON.message)
        admin_risky_icon_proceed()
      }
    })
  }

  function admin_risky_mfa_confirm(mfa_string, curr_modal, modal_mapping, id, toggle_method, modify_id){
    toggle_method('hide');
    $.ajax({
      type: "POST",
      url: "<%= RailsBase.url_routes.admin_verify_intent_path%>",
      headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
      dataType: 'json',
      data: { 'mfa_input': mfa_string , 'modal_mapping': modal_mapping, 'id': id, 'modify_id': modify_id },
      success: function(data) {
        $(`#${curr_modal}`).modal('hide');
        set_shared_admin_modal_content(data.html);
        toggle_method('show');
      },
      error: function(xhr, status, error) {
        $(`#${curr_modal}`).modal('hide');
        toggle_method('show');
        _rails_base_display_alert(xhr.responseJSON.message)
      }
    })
  }

  function admin_risky_icon_wait(){
    $('.risky-icon-og').hide()
    $('.risky-icon-mask').show()
  }
  function admin_risky_icon_proceed(){
    $('.risky-icon-og').show()
    $('.risky-icon-mask').hide()
  }

  function admin_ensure_disabled(){
    $('.stay-disabled').bootstrapToggle('disable')
  }

  function admin_pause_concurrency(){
    $('.admin-concurrent-block').bootstrapToggle('disable');
  }
  function admin_resume_concurrency(){
    $('.admin-concurrent-block').bootstrapToggle('enable');
  }
</script>
