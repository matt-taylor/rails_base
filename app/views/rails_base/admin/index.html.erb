<div class='table-responsive' style="overflow-x:auto; width: inherit !important;">
  <table class="tableFixHead table table-striped table-bordered">
    <thead class="thead-dark text-center">
      <% RailsBase.config.admin.admin_page_tiles.each do |tile| %>
        <th> <%= tile.col_name %> </th>
      <% end %>
    </thead>
    <tbody class='text-center'>
      <% admin_user = current_user %>
    <% User.all.each do |user| %>
      <% id_base = "#{user.id}_#{(100*rand).to_i}" %>
      <tr>
        <% RailsBase.config.admin.admin_page_tiles.each do |tile| %>
          <td id='<%= id_base %>_<%= tile.name %>' <%= "style='min-width:#{tile.min_width}px'" if tile.min_width %>>
            <% case tile.type %>
            <% when :risky %>
              <%= render partial: 'rails_base/shared/admin_risky_change', locals: { type:  tile.name, current_value: tile.value.call(user), user: user, parent: id_base , modal_mapping: tile.name, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :toggle %>
              <%= render partial: 'rails_base/shared/admin_toggle_button', locals: { type: tile.name, checked: tile.value.call(user), user: user, data_on: tile.on, data_off: tile.off, parent: id_base, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :selector %>
              <%= render partial: 'rails_base/shared/admin_selector_dropdown', locals: { type: tile.name, options: tile.selector.call(user), selector: tile.value.call(user), user: user, parent: id_base, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :text %>
              <%= render partial: 'rails_base/shared/admin_modify_text', locals: { type: tile.name , current_value: tile.value.call(user), user: user, parent: id_base, modal_partial: tile.partial, disable_action: tile.disabled&.call(user, admin_user), disable_msg: tile.disabled_msg&.call(user, admin_user) } %>
            <% when :button %>
              <%= button_to tile.col_name,  tile.url.call(user), method: tile.method, class: "btn btn-block btn-#{tile.color}"%>
            <% when :plain %>
              <%= tile.value.call(user) %>
            <% end %>
          </td>
        <% end %>
      </tr>
    <% end %>
    </tbody>
  </table>
</div>

<div class='modal fade' id='sharedAdminModal' tabindex='-1' role='dialog' aria-labelledby='sharedAdminModalLabel' aria-hidden='true'></div>

<script type="text/javascript">
  var shared_admin_modal = 'sharedAdminModal'

  function show_shared_admin_modal(){
    $(`#${shared_admin_modal}`).appendTo('body').modal('show');
  }

  function hide_shared_admin_modal(){
    $(`#${shared_admin_modal}`).modal('hide');
    clear_shared_admin_modal();
  }

  function set_shared_admin_modal_content(html){
    $(`#${shared_admin_modal}`).html(html)
    show_shared_admin_modal();
  }

  function clear_shared_admin_modal(){
    set_shared_admin_modal_content('');
  }

  function admin_risky_mfa_send(modal_id){
    _rails_base_hide_displays()
    $.ajax({
      type: "POST",
      url: "<%= RailsBase.url_routes.admin_validate_intent_path%>",
      headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
      success: function(data) {
        $(`#${modal_id}`).modal('show');
        admin_risky_icon_proceed()
      },
      error: function(xhr, status, error) {
        _rails_base_display_alert(xhr.responseJSON.message)
        admin_risky_icon_proceed()
      }
    })
  }

  function admin_risky_mfa_confirm(mfa_string, curr_modal, modal_mapping, id, toggle_method, modify_id){
    toggle_method('hide');
    $.ajax({
      type: "POST",
      url: "<%= RailsBase.url_routes.admin_verify_intent_path%>",
      headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
      dataType: 'json',
      data: { 'mfa_input': mfa_string , 'modal_mapping': modal_mapping, 'id': id, 'modify_id': modify_id },
      success: function(data) {
        $(`#${curr_modal}`).modal('hide');
        set_shared_admin_modal_content(data.html);
        toggle_method('show');
      },
      error: function(xhr, status, error) {
        $(`#${curr_modal}`).modal('hide');
        toggle_method('show');
        _rails_base_display_alert(xhr.responseJSON.message)
      }
    })
  }

  function admin_risky_icon_wait(){
    $('.risky-icon-og').hide()
    $('.risky-icon-mask').show()
  }
  function admin_risky_icon_proceed(){
    $('.risky-icon-og').show()
    $('.risky-icon-mask').hide()
  }

  function admin_pause_concurrency(){
    $('.admin-concurrent-block').bootstrapToggle('disable');
  }
  function admin_resume_concurrency(){
    $('.admin-concurrent-block').bootstrapToggle('enable');
  }
</script>
