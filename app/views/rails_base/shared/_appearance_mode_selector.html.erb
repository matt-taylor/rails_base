<% if RailsBase.appearance.enabled %>
  <% if display %>
    <!-- Button trigger modal -->
    <button type="button" class="btn btn_info <%= btn%> close-me" data-toggle="modal" data-target="#appearance_mode_selector">
      Dark/Lite Mode
    </button>

    <!-- Modal -->
    <div class="modal fade" id="appearance_mode_selector" tabindex="-1" role="dialog" aria-labelledby="appearance_mode_selectorTitle" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="appearance_mode_selectorTitle">Select Appearance Mode</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <h5> Currently using <span id='appearance_mode_text'><%= appearance_mode_drop_down[:current] %> <span> </h5>
            <%= select_tag 'appearance_mode_selector_id', options_for_select(appearance_mode_drop_down[:types_a]), class: 'form-control', include_blank: 'Select Appearance Mode' %>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-block btn_secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
  <% end %>
  <style type="text/css">
    .modal .modal-content.bg-dark {
      background: black;
      color: gray ;
    }
    select.bg-dark, select.bg-secondary {
      background-color: black !important;
      color: white ;
    }
    input.bg-dark:not([type='submit']), input.bg-secondary:not([type='submit']) {
      background-color: black !important;
      color: white ;
    }
    nav li p.bg-dark, nav p.bg-secondary {
      background-color: black !important;
      color: white ;
    }
    .input-group-text.bg-dark, .input-group-text.bg-secondary {
      background-color: black !important;
      color: white ;
    }
  </style>
  <script type="text/javascript">
    <% dark = RailsBase::Configuration::Appearance::DARK_MODE %>
    <% light = RailsBase::Configuration::Appearance::LIGHT_MODE %>
    var type_mapping = JSON.parse('<%= raw RailsBase::Configuration::Appearance::APPEARANCE_TYPES.to_json %>')

    var cookie_name = `<%= RailsBase::ApplicationController::APPEARANCE_MODE_COOKIE %>`;
    var cookie_actual_name = `<%= RailsBase::ApplicationController::APPEARANCE_MODE_ACTUAL_COOKIE %>`;
    var dark_mode_changes = [
      {
        'descriptor': 'thead',
        '<%= dark %>': '<%= RailsBase.appearance.t_header.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.t_header.light_mode %>'
      },
      {
        'descriptor': 'tbody',
        '<%= dark %>': '<%= RailsBase.appearance.t_body.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.t_body.light_mode %>'
      },
      {
        'descriptor': 'body',
        '<%= dark %>': '<%= RailsBase.appearance.bg_color.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.bg_color.light_mode %>'
      },
      {
        'descriptor': 'input:not(.btn)', // inputs but not button inputs
        '<%= dark %>': '<%= RailsBase.appearance.bg_color.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.bg_color.light_mode %>'
      },
      {
        'descriptor': '.modal-content',
        '<%= dark %>': '<%= RailsBase.appearance.bg_color.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.bg_color.light_mode %>'
      },
      {
        'descriptor': 'select',
        '<%= dark %>': '<%= RailsBase.appearance.bg_color.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.bg_color.light_mode %>'
      },
      {
        'descriptor': 'nav li p',
        '<%= dark %>': '<%= RailsBase.appearance.bg_color.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.bg_color.light_mode %>'
      },
      {
        'descriptor': '.navbar',
        '<%= dark %>': '<%= RailsBase.appearance.navbar.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.navbar.light_mode %>'
      },
      {
        'descriptor': 'footer',
        '<%= dark %>': '<%= RailsBase.appearance.navbar.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.navbar.light_mode %>'
      },
      {
        'descriptor': '.input-group-text',
        '<%= dark %>': '<%= RailsBase.appearance.navbar.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.navbar.light_mode %>'
      },
      {
        'descriptor': '.<%= appearance_text_class %>',
        '<%= dark %>': '<%= RailsBase.appearance.text.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.text.light_mode %>'
      },
      {
        'descriptor': '.card',
        '<%= dark %>': '<%= RailsBase.appearance.card.dark_mode %>',
        '<%= light %>': '<%= RailsBase.appearance.card.light_mode %>'
      },
      // buttons
      <% RailsBase.appearance.class::BUTTONS.each do |klass| %>
      {
        'descriptor': '.<%= klass %>',
        '<%= dark %>': '<%= RailsBase.appearance.dig(klass, :dark_mode) %>',
        '<%= light %>': '<%= RailsBase.appearance.dig(klass, :light_mode) %>'
      },
      <% end %>
    ]

    function toggle_dark_mode(set_key){
      set_key ||= get_cookie(cookie_name)
      var remove_keys = Object.keys(type_mapping)
      remove_keys.splice( $.inArray(set_key, remove_keys),1 );
      for (i = 0; i < dark_mode_changes.length; ++i) {
        var descriptor = dark_mode_changes[i]['descriptor']
        elements = $(`${descriptor}`)
        for (s = 0; s < remove_keys.length; ++s) {
          elements.removeClass(dark_mode_changes[i][remove_keys[s]])
        }
        var insert = dark_mode_changes[i][set_key]
        elements.addClass(insert)
      }
    }

    $('#appearance_mode_selector_id').change(function() {
      var value = $("#appearance_mode_selector_id").val();
      if(!value){
        return
      }
      set_cookie(cookie_name, '')
      set_and_toggle_mode(value)
    })
    // This function MUST be called outside of document ready
    // to ensure dark mode does not activate after document is loaded
    set_and_toggle_mode( `<%= cookies[RailsBase::ApplicationController::APPEARANCE_MODE_COOKIE] || RailsBase.appearance.default_mode %>`)
    $('#appearance_mode_selector').appendTo('body');
    $(document).ready(function(){
      // differentiation of load order means we need to call this twice
      set_and_toggle_mode( `<%= cookies[RailsBase::ApplicationController::APPEARANCE_MODE_COOKIE] || RailsBase.appearance.default_mode %>`)
      $(document).ajaxComplete(function () {
        set_and_toggle_mode()
      });
    });

    function set_and_toggle_mode(value) {
      if(value){
        set_cookie(cookie_name, value);
        set_cookie(cookie_actual_name, value);
      }
      $('#appearance_mode_text').text(type_mapping[value])
      if(get_cookie(cookie_name)=='<%= RailsBase::Configuration::Appearance::MATCH_OS%>'){
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          toggle_dark_mode('<%= dark %>');
          set_cookie(cookie_actual_name, '<%= dark %>');
        } else {
          toggle_dark_mode('<%= light %>');
          set_cookie(cookie_actual_name, '<%= light %>');
        }
      } else {
        toggle_dark_mode();
      }
    }

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
      set_and_toggle_mode(get_cookie(cookie_name))
    });
  </script>
<% end %>
