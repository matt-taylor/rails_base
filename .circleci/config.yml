version: 2.1 # Use 2.1 to enable using orbs and other features.

orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

jobs:
  build:
    docker:
      - image: cimg/ruby:2.7-node
    steps:
      - checkout
      - ruby/install-deps
    environment:
      SKIP_CUSTOM_INIT: 'true'
  validate-bundler:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - checkout
      - run:
          name: Validate Version Matches Gemfile.lock
          command: |
            bin/validate_bundler
  publish-rubygems:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Publish Ruby Gems
          command: |
            bin/publish_ruby_gems
  publish-github:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: 'Get Go'
          command: |
            sudo apt-get update -qq
            sudo apt-get -y --no-install-recommends install golang-go
      - run:
          name: 'Set Git stats'
          command: |
            git config user.name $GITHUB_USER
            git config user.email $GITHUB_EMAIL
      - run:
          name: 'Download GHR'
          command: |
            curl -sSL https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz | tar xz -f - -C . ghr_v0.13.0_linux_amd64/ghr
            mv ghr_v0.13.0_linux_amd64/ghr .
            rm -rf ghr_v0.13.0_linux_amd64
            chmod 0755 ghr
      - run:
          name: Publish Git
          command: |
            export GHRLOCATION=ghr
            bin/publish_git
  test:
    docker:
      - image: cimg/ruby:2.7-node
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
    environment:
      SKIP_CUSTOM_INIT: 'false'
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      MYSQL_HOST: 127.0.0.1
      MYSQL_ROOT_PASSWORD: rootpw
      MYSQL_DATABASE: test_db
      MYSQL_USER: user
      MYSQL_PORT: 3306
      MYSQL_PASSWORD: passw0rd
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Database setup
          command: SKIP_CUSTOM_INIT=true bundle exec rails db:schema:load --trace
      - run:
          name: Setup Climate Control test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run le tests
          command: |
            ./cc-test-reporter before-build
            SIMPLE_COV_RUN=true bundle exec rspec --format RspecJunitFormatter --out test-results/rspec/rspec.xml --format progress --color
            ./cc-test-reporter after-build format-coverage -t simplecov

workflows:
  version: 2
  yeet-le-jobs:
    jobs:
      - build
      - validate-bundler:
          requires:
            - build
      - test:
          requires:
            - build
      - publish-github:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - publish-rubygems:
          requires:
            - test
          filters:
            branches:
              only:
                - main
