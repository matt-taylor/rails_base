version: 2.1

orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

defaults: &defaults
  docker:
    - image: circleci/mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: rootpw
        MYSQL_DATABASE: test_db
        MYSQL_USER: user
        MYSQL_PASSWORD: passw0rd
  environment:
    BUNDLE_JOBS: "3"
    BUNDLE_RETRY: "3"
    MYSQL_HOST: 127.0.0.1
    MYSQL_ROOT_PASSWORD: rootpw
    MYSQL_DATABASE: test_db
    MYSQL_USER: user
    MYSQL_PORT: 3306
    MYSQL_PASSWORD: passw0rd
    RAILS_ENV: test

commands:
  bundler-preamble:
    description: "Install ruby and the Gemfile dependencies"
    parameters:
      ruby-version:
        type: string
        description: "Ruby Gem version"
      cache-breaker:
        type: string
        default: "0"
        description: "Cache breaker to force new cache instantiation"

    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: bundle-<< parameters.ruby-version >>-{{ checksum "Gemfile.lock" }}-<< parameters.cache-breaker >>
      - ruby/install-deps:
          path: vendor/bundle
          with-cache: false
      - save_cache:
          key: bundle-<< parameters.ruby-version >>-{{ checksum "Gemfile.lock" }}-<< parameters.cache-breaker >>
          paths:
            - vendor/bundle

  wait-for-it:
    description: "Wait for service to be available"
    parameters:
      service-name:
        type: string
        description: "Name of the service to wait for"
      endpoint:
        type: string
        description: "Endpoint of the service"
      port:
        type: string
        description: "Port of the service to wait for"
      wait-in-seconds:
        default: 10
        type: integer
        description: "Max time in seconds to wait for service"

    steps:
      - run:
          name: Waiting for <<parameters.service-name>> to be ready
          command: |
            for i in `seq 1 <<parameters.wait-in-seconds>>`;
            do
              nc -z <<parameters.endpoint>> <<parameters.port>> && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for <<parameters.service-name>> && exit 1

jobs:
  validate-bundler:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - run:
          name: Validate Version Matches Gemfile.lock
          command: bin/validate_bundler
  publish-rubygems:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Publish Ruby Gems
          command: |
            bin/publish_ruby_gems
  publish-github:
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: 'Get Go'
          command: |
            sudo apt-get update -qq
            sudo apt-get -y --no-install-recommends install golang-go
      - run:
          name: 'Set Git stats'
          command: |
            git config user.name $GITHUB_USER
            git config user.email $GITHUB_EMAIL
      - run:
          name: 'Download GHR'
          command: |
            curl -sSL https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz | tar xz -f - -C . ghr_v0.13.0_linux_amd64/ghr
            mv ghr_v0.13.0_linux_amd64/ghr .
            rm -rf ghr_v0.13.0_linux_amd64
            chmod 0755 ghr
      - run:
          name: Publish Git
          command: |
            export GHRLOCATION=ghr
            bin/publish_git
  test:
    parameters:
      ruby-version:
        default: "2.7.5"
        type: string
        description: "Ruby version to test against"
      rails-version:
        default: "~> 6.1.0"
        type: string
        description: "Rails version to test against"
    <<: *defaults
    docker:
      - image: circleci/ruby:<< parameters.ruby-version >>-node
    steps:
      - bundler-preamble:
          ruby-version: << parameters.ruby-version >>
      - wait-for-it:
          endpoint: "127.0.0.1"
          port: "3306"
          service-name: "MySQL"
      - run:
          name: Database setup
          command: SKIP_CUSTOM_INIT=true bundle exec rails db:schema:load --trace
      - run:
          name: Setup Climate Control test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run le tests
          command: |
            ./cc-test-reporter before-build
            SKIP_CUSTOM_INIT=false SIMPLE_COV_RUN=true bundle exec rspec --format RspecJunitFormatter --out test-results/rspec/rspec.xml --format progress --color
            ./cc-test-reporter after-build format-coverage -t simplecov

workflows:
  version: 2
  yeet-le-jobs:
    jobs:
      - validate-bundler
      - test
      - publish-github:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - publish-rubygems:
          requires:
            - test
          filters:
            branches:
              only:
                - main
